{"version":3,"file":"auth.esm.js","sources":["../src/auth.ts"],"sourcesContent":["import cookie from \"cookie\";\r\nimport * as jsonwebtoken from \"jsonwebtoken\";\r\nimport { join } from \"./path\";\r\nexport class Auth {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.get = async (request) => {\r\n            const { path } = request;\r\n            if (path === this.getPath(\"csrf\")) {\r\n                return { body: \"1234\" };\r\n            }\r\n            else if (path === this.getPath(\"session\")) {\r\n                const session = await this.getSession(request);\r\n                return {\r\n                    body: {\r\n                        session,\r\n                    },\r\n                };\r\n            }\r\n            return await this.handleEndpoint(request);\r\n        };\r\n        this.post = async (request) => {\r\n            return await this.handleEndpoint(request);\r\n        };\r\n        this.getSession = async ({ headers }) => {\r\n            const token = await this.getToken(headers);\r\n            if (token) {\r\n                if (this.config?.callbacks?.session) {\r\n                    return await this.config.callbacks.session(token, { user: token.user });\r\n                }\r\n                return { user: token.user };\r\n            }\r\n            return {};\r\n        };\r\n    }\r\n    get basePath() {\r\n        return this.config?.basePath ?? \"/api/auth\";\r\n    }\r\n    getJwtSecret() {\r\n        if (this.config?.jwtSecret) {\r\n            return this.config?.jwtSecret;\r\n        }\r\n        if (this.config?.providers?.length) {\r\n            const provs = this.config?.providers?.map((provider) => provider.id).join(\"+\");\r\n            return Buffer.from(provs).toString(\"base64\");\r\n        }\r\n        return \"svelte_auth_secret\";\r\n    }\r\n    async getToken(headers) {\r\n        if (!headers.cookie) {\r\n            return null;\r\n        }\r\n        const cookies = cookie.parse(headers.cookie);\r\n        if (!cookies.svelteauthjwt) {\r\n            return null;\r\n        }\r\n        let token;\r\n        try {\r\n            token = (jsonwebtoken.verify(cookies.svelteauthjwt, this.getJwtSecret()) || {});\r\n        }\r\n        catch {\r\n            return null;\r\n        }\r\n        if (this.config?.callbacks?.jwt) {\r\n            token = await this.config.callbacks.jwt(token);\r\n        }\r\n        return token;\r\n    }\r\n    getBaseUrl(host) {\r\n        return this.config?.host ?? `http://${host}`;\r\n    }\r\n    getPath(path) {\r\n        const pathname = join([this.basePath, path]);\r\n        return pathname;\r\n    }\r\n    getUrl(path, host) {\r\n        const pathname = this.getPath(path);\r\n        return new URL(pathname, this.getBaseUrl(host)).href;\r\n    }\r\n    setToken(headers, newToken) {\r\n        const originalToken = this.getToken(headers);\r\n        return {\r\n            ...(originalToken ?? {}),\r\n            ...newToken,\r\n        };\r\n    }\r\n    signToken(token) {\r\n        const opts = !token.exp\r\n            ? {\r\n                expiresIn: this.config?.jwtExpiresIn ?? \"30d\",\r\n            }\r\n            : {};\r\n        const jwt = jsonwebtoken.sign(token, this.getJwtSecret(), opts);\r\n        return jwt;\r\n    }\r\n    async getRedirectUrl(host, redirectUrl) {\r\n        let redirect = redirectUrl || this.getBaseUrl(host);\r\n        if (this.config?.callbacks?.redirect) {\r\n            redirect = await this.config.callbacks.redirect(redirect);\r\n        }\r\n        return redirect;\r\n    }\r\n    async handleProviderCallback(request, provider) {\r\n        const { headers, host } = request;\r\n        const [profile, redirectUrl] = await provider.callback(request, this);\r\n        let token = (await this.getToken(headers)) ?? { user: {} };\r\n        if (this.config?.callbacks?.jwt) {\r\n            token = await this.config.callbacks.jwt(token, profile);\r\n        }\r\n        else {\r\n            token = this.setToken(headers, { user: profile });\r\n        }\r\n        const jwt = this.signToken(token);\r\n        const redirect = await this.getRedirectUrl(host, redirectUrl ?? undefined);\r\n        return {\r\n            status: 302,\r\n            headers: {\r\n                \"set-cookie\": `svelteauthjwt=${jwt}; Path=/; HttpOnly`,\r\n                Location: redirect,\r\n            },\r\n        };\r\n    }\r\n    async handleEndpoint(request) {\r\n        const { path, headers, method, host } = request;\r\n        if (path === this.getPath(\"signout\")) {\r\n            const token = this.setToken(headers, {});\r\n            const jwt = this.signToken(token);\r\n            if (method === \"POST\") {\r\n                return {\r\n                    headers: {\r\n                        \"set-cookie\": `svelteauthjwt=${jwt}; Path=/; HttpOnly`,\r\n                    },\r\n                    body: {\r\n                        signout: true,\r\n                    },\r\n                };\r\n            }\r\n            const redirect = await this.getRedirectUrl(host);\r\n            return {\r\n                status: 302,\r\n                headers: {\r\n                    \"set-cookie\": `svelteauthjwt=${jwt}; Path=/; HttpOnly`,\r\n                    Location: redirect,\r\n                },\r\n            };\r\n        }\r\n        const regex = new RegExp(join([this.basePath, `(?<method>signin|callback)/(?<provider>\\\\w+)`]));\r\n        const match = path.match(regex);\r\n        if (match && match.groups) {\r\n            const provider = this.config?.providers?.find((provider) => provider.id === match.groups.provider);\r\n            if (provider) {\r\n                if (match.groups.method === \"signin\") {\r\n                    return await provider.signin(request, this);\r\n                }\r\n                else {\r\n                    return await this.handleProviderCallback(request, provider);\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            status: 404,\r\n            body: \"Not found.\",\r\n        };\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}