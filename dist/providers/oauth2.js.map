{"version":3,"file":"oauth2.js","sources":["../../src/providers/oauth2.ts"],"sourcesContent":["import { ucFirst } from \"../helpers\";\r\nimport { OAuth2BaseProvider } from \"./oauth2.base\";\r\nimport nodeFetch from \"node-fetch\";\r\nconst safeFetch = window ? fetch : nodeFetch;\r\nconst defaultConfig = {\r\n    responseType: \"code\",\r\n    grantType: \"authorization_code\",\r\n    contentType: \"application/json\",\r\n};\r\nexport class OAuth2Provider extends OAuth2BaseProvider {\r\n    constructor(config) {\r\n        super({\r\n            ...defaultConfig,\r\n            ...config,\r\n        });\r\n    }\r\n    getAuthorizationUrl({ host }, auth, state, nonce) {\r\n        const data = {\r\n            state,\r\n            nonce,\r\n            response_type: this.config.responseType,\r\n            client_id: this.config.clientId,\r\n            scope: Array.isArray(this.config.scope) ? this.config.scope.join(\" \") : this.config.scope,\r\n            redirect_uri: this.getCallbackUri(auth, host),\r\n            ...(this.config.authorizationParams ?? {}),\r\n        };\r\n        const url = `${this.config.authorizationUrl}?${new URLSearchParams(data)}`;\r\n        return url;\r\n    }\r\n    async getTokens(code, redirectUri) {\r\n        const data = {\r\n            code,\r\n            grant_type: this.config.grantType,\r\n            client_id: this.config.clientId,\r\n            redirect_uri: redirectUri,\r\n            client_secret: this.config.clientSecret,\r\n            ...(this.config.params ?? {}),\r\n        };\r\n        let body;\r\n        if (this.config.contentType === \"application/x-www-form-urlencoded\") {\r\n            body = Object.entries(data)\r\n                .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\r\n                .join(\"&\");\r\n        }\r\n        else {\r\n            body = JSON.stringify(data);\r\n        }\r\n        const res = await safeFetch(this.config.accessTokenUrl, {\r\n            body,\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": this.config.contentType,\r\n                ...(this.config.headers ?? {}),\r\n            },\r\n        });\r\n        return await res.json();\r\n    }\r\n    async getUserProfile(tokens) {\r\n        const res = await safeFetch(this.config.profileUrl, {\r\n            headers: { Authorization: `${ucFirst(tokens.token_type)} ${tokens.access_token}` },\r\n        });\r\n        return await res.json();\r\n    }\r\n}\r\n"],"names":["nodeFetch","OAuth2BaseProvider","ucFirst"],"mappings":";;;;;;;;;;;;;AAGA,MAAM,YAAY,SAAS,QAAQA;AACnC,MAAM,gBAAgB;AAAA,EAClB,cAAc;AAAA,EACd,WAAW;AAAA,EACX,aAAa;AAAA;6BAEmBC,yCAAmB;AAAA,EACnD,YAAY,QAAQ;AAChB,UAAM;AAAA,SACC;AAAA,SACA;AAAA;AAAA;AAAA,EAGX,oBAAoB,EAAE,QAAQ,MAAM,OAAO,OAAO;AAC9C,UAAM,OAAO;AAAA,MACT;AAAA,MACA;AAAA,MACA,eAAe,KAAK,OAAO;AAAA,MAC3B,WAAW,KAAK,OAAO;AAAA,MACvB,OAAO,MAAM,QAAQ,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACpF,cAAc,KAAK,eAAe,MAAM;AAAA,SACpC,KAAK,OAAO,uBAAuB;AAAA;AAE3C,UAAM,MAAM,GAAG,KAAK,OAAO,oBAAoB,IAAI,gBAAgB;AACnE,WAAO;AAAA;AAAA,QAEL,UAAU,MAAM,aAAa;AAC/B,UAAM,OAAO;AAAA,MACT;AAAA,MACA,YAAY,KAAK,OAAO;AAAA,MACxB,WAAW,KAAK,OAAO;AAAA,MACvB,cAAc;AAAA,MACd,eAAe,KAAK,OAAO;AAAA,SACvB,KAAK,OAAO,UAAU;AAAA;AAE9B,QAAI;AACJ,QAAI,KAAK,OAAO,gBAAgB,qCAAqC;AACjE,aAAO,OAAO,QAAQ,MACjB,IAAI,CAAC,CAAC,KAAK,WAAW,GAAG,mBAAmB,QAAQ,mBAAmB,UACvE,KAAK;AAAA,WAET;AACD,aAAO,KAAK,UAAU;AAAA;AAE1B,UAAM,MAAM,MAAM,UAAU,KAAK,OAAO,gBAAgB;AAAA,MACpD;AAAA,MACA,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB,KAAK,OAAO;AAAA,WACxB,KAAK,OAAO,WAAW;AAAA;AAAA;AAGnC,WAAO,MAAM,IAAI;AAAA;AAAA,QAEf,eAAe,QAAQ;AACzB,UAAM,MAAM,MAAM,UAAU,KAAK,OAAO,YAAY;AAAA,MAChD,SAAS,EAAE,eAAe,GAAGC,gBAAQ,OAAO,eAAe,OAAO;AAAA;AAEtE,WAAO,MAAM,IAAI;AAAA;AAAA;;;;"}